#!/usr/bin/env python

from lib import camera
from lib import arduino
from lib import camutils
from lib import imgutils

import cv2
import numpy as np
import json

import time
import argparse
import logging
import pdb

from pprint import pprint as pp


BLUE_HEX = "052C72"
MATRIX_HEIGHT = 128
MATRIX_WIDTH = 128
ratio = 1.0
screenCnt = None


""" USAGE INFORMATION """
ap = argparse.ArgumentParser()
ap.add_argument("-t", "--train", required=False,
        help="Operate in training mode", action="store_true")
ap.add_argument("-c", "--calibrate", required=False,
        help="Calibrate camera prior to running program", action="store_true")
ap.add_argument("-o", "--original", required=False,
        help="Show the Original unwarped/unscaled image", action="store_true")
ap.add_argument("-m", "--mask", required=False,
        help="Show the color Masked Image", action="store_true")
ap.add_argument("-e", "--edges", required=False,
        help="Show Edges/Contours on original image", action="store_true")
ap.add_argument("-w", "--warped", required=False,
        help="Show the Warped (perspective shifted) image", action="store_true")
ap.add_argument("-n", "--neural", required=False,
        help="Show the Image to be passed to the Neural Network", action="store_true")
ap.add_argument("-l", "--loglevel", required=False,
        help="Log level to be used")
arg_dict = vars(ap.parse_args())


class RBI:
    def __init__(self, log_level="INFO"):
        try:
            self.__configure_logger(eval("logging." + log_level.upper()))
        except AttributeError:
            if log_level is None:
                self.__configure_logger(logging.INFO)
            else:
                self.__configure_logger(logging.DEBUG)
                self._log.warn("Unable to configure logger with value '" +
                        str(log_level) + "'\n")

        self.__configure_camera()
        self.__configure_serial()


    def loop(self, perspective, img_map=False):
        while(True):
            success, frame = self.feed.read()

            if img_map and img_map['original']:
                cv2.imshow("My Frame", frame)

            warp = self.warp_frame(frame, perspective, img_map)

            if cv2.waitKey(1) & 0xFF == ord('1'):
                break


    def warp_frame(self, frame, perspective, img_map=False):
        M = perspective['M']
        height = perspective['h']
        width = perspective['w']
        c = perspective['c']
        warped = cv2.warpPerspective(frame, M, (width, height))
        
        if img_map and img_map['warped']:
            cv2.imshow('Warped', warped)

        return warped

    def __configure_logger(self, log_level):
        logging.basicConfig(level=log_level)
        self._log = logging.getLogger('RBI_Class')


    def __configure_camera(self):
        self.camera = camera.Camera()
        self.feed = self.camera.get_feed()
        
        cam_cfg = json.load(open('../camera.cfg'))
        self.camera.set_brightness(int(cam_cfg['Brightness']))
        self.camera.set_focus(int(cam_cfg['Focus']))
        self._log.debug("Brightness set to %s" % str(self.camera.get_brightness()))
        self._log.debug("Focus set to %s" % str(self.camera.get_focus()))


    def __configure_serial(self, port='/dev/ttyACM0', baudrate=57600):
        self.arduino = arduino.Arduino(port=port, baudrate=baudrate)
        self._log.debug("Configured Arduino on port %s, baudrate %d" % (port, baudrate))
        self.arduino.write('1')


    # TODO: Not sure this will actually ever get called
    def __del__(self):
        try:
            self.feed.release()
            cv2.destroyAllWindows()
        except AttributeError:
            self._log.warn("Attribute Error when closing RBI")


if __name__ == '__main__':
    # Determines which intermediate frames will be shown
    img_map = arg_dict

    rbi = RBI(arg_dict['loglevel'])
    if arg_dict['calibrate']:
        camutils.calibrate_camera(rbi.feed, img_map)

    perspective = camutils.get_perspective(rbi.feed, BLUE_HEX, 0.25, img_map)

    cv2.destroyAllWindows()
    rbi.loop(perspective, img_map)

